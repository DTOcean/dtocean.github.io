.. _tech_environment:

Environmental Impact Assessment Module
--------------------------------------

Introduction
^^^^^^^^^^^^

The purpose of the Environmental Impact Assessment (EIA) is to assess the
environmental impacts generated by the various technological choices taken by
the design modules when optimising an array of OEC devices.

The EIA consists of a set of functions that are able to qualify and quantify the
potential pressures generated by the array of wave or tidal devices on the
marine environment. It uses two types of inputs. Some data will have to be
provided by the user; other data will come directly from the other modules
(e.g. Hydrodynamics, Electrical architecture, Moorings and Foundations etc.).

The EIA is based on several scoring principles which are detailed in this
chapter of the Technical Manual. In summary, the use of the environmental
functions allows the EIA to generate numerical values that will be converted
into environmental scores (EIS - Environmental Impact Score). The conversion
from the function’ scores to the environmental scores are made through
calibration matrices. Each function is associated with one calibration matrix
(or several depending on the complexity of the function) in order to qualify
the initial pressure score. Calibration matrices are based on literature data
or empirical data together with a weighting protocol which is implemented in
the EIA logic to better qualify the environmental impacts.

The scoring allocation system developed within the DTOcean framework is generic
for each environmental function and based in three consecutive main steps. The
first step consists of qualifying and quantifying the 'pressure' generated by
all components introduced in the the water. This could be, for example, the
generation of underwater noise or a footprint from the device foundations. The
second step is to define if there are some 'receptors' or not in the area that
is potentially affected by the pressures generated in the first step. Receptors
can be mammals, birds or habitats. Within the receptors, some distinctions are
made depending on their sensitivities to the pressures. Some receptors are also
identified as 'very sensitive' e.g. regulatory protected species. The last step
consists of a refinement of the receptor's qualification with the definition of
their seasonal distribution (occurrence or absence on site during the year).

The EIA should inform the user about the 'environmental impact', including
adverse but also potentially positive impact, of the technological choices and
options made during each individual design module, as well as their combined
effect.

Recommendations based on the pressure and the receptor's score are provided to
the user to help improve the environmental impact of the proposed array using
more environmental friendly solutions.

Global Concept of the Module
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Environmental risk assessment is a process that estimates the likelihood and
consequence of adverse (or positive) environmental impacts (United States
Environmental Protection Agency, 2015). In that regard, conceptual model
development is critical to assessing the environmental risk. The approach used
here is based on the concept of environmental effects generated by 'stressors'
and the related exposure of 'receptors' to these effects. A stressor is any
physical, chemical, or biological entity that can induce an adverse response.
Stressors may adversely affect specific natural resources or entire ecosystems,
including plants and animals, as well as the environment with which they
interact. A receptor is any environmental feature, usually an ecological
entity. Examples of stressors and receptors associated with tidal energy
developments given in :numref:`fig-stressors` (Polagye et al., 2011).

.. _fig-stressors:

.. figure:: /images/technical/stressors.png

   Example of environmental stressors and receptors associated with tidal energy developments (United States Environmental Protection Agency, 2015)

Within this framework, it is therefore a matter to systematically identify and
evaluate the relationships between all stressors and their impact on receptors.
In order to achieve this, a set of environmental functions have been
specifically designed, as well as a scoring system to build a framework of
scenarios that are able to:

* Qualitatively and quantitatively characterise the effects of the different
  stressors for tidal and wave array developments
* Quantitatively estimate exposure (and risk) to receptors
* Provide environmental impact assessment estimates (through the scoring
  system) to inform array design decisions

Based on this conceptual approach, when assessing the environmental impacts the
array development phases are collection into two groups as follows:

* Installation, O&M and decommissioning phases
* Exploitation phase

Indeed, the installation, O&M and decommissioning phases often generate
significant but short-term impacts, whilst the impact of the exploitation phase
is often lower in magnitude but occur over a longer time period.

Environmental Functions Overview
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order to assess the potential environmental impacts of tidal and wave arrays
for these two phases, a set of generic environmental issues have been
specifically selected and described. These are shown in
:numref:`tab-env-impacts`.

.. _tab-env-impacts:

.. figure:: /images/technical/env_impacts.png

   List of environmental impacts assessed by DTOcean

Each issue is specifically allocated to the different DTOcean modules
(Hydrodynamics, Electrical Sub- Systems, Mooring and Foundations...), as each
module generates different stressors depending on its purpose.
:numref:`tab-env-modules` shows which issues are assessed for each of the
DTOcean modules. As can be seen, the computational modules with the highest
number of issues are the Hydrodynamics and the Electrical Sub-Systems modules.

.. _tab-env-modules:

.. figure:: /images/technical/env_modules.png

   Environmental issues associated with each DTOcean modules

Considering these issues for all the modules results in 13 specific
environmental functions, with specific input values depending on the module.
These functions quantify the pressure generated by the devices and their
components.

Scoring System Principles
^^^^^^^^^^^^^^^^^^^^^^^^^

The use of environmental functions allows the EIA to generate numerical values
(function's scores) that will be converted to an EIS ranging from +50 to -100
(scale shown in :numref:`fig-env-scale-tech`).

.. _fig-env-scale-tech:

.. figure:: /images/technical/env_scale.png

   Example EIS scale

Environmental Functions Overview
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order for the user to have both a global environmental assessment and
detailed information when using the DTOcean software, two levels (L1 and L2) of
results will be available within the software. The relationships between the
levels will also be made available. At each level, adverse and positive impacts
are always given separately. The different display levels are defined as follow:


* Level 1: The first level of assessment provides a global (agglomerated) EIS
  given for each module. The result for each module is generated by the
  summation of EIS obtained by each function selected for that specific module
  and normalised on the scal e ranging from +50 to -100. This level also
  contains the range of impacts associated with the EIS for each module. A
  graphical example of the level 1 results is given in
  :numref:`fig-module-impact-tech`.

.. _fig-module-impact-tech:

.. figure:: /images/technical/env_output_global.png

   Illustration of the module environmental impact score display

* Level 2: The second level provides full details at the function level. This
  level also contains the level of confidence associated to the EIS for each
  function. A graphical illustration of this level is shown in
  :numref:`fig-function-impact-tech`.

.. _fig-function-impact-tech:

.. figure:: /images/technical/env_output_function.png

   Illustration of the function environmental impact score display

By default for the summation purpose (going from L2 to L1), all
functions and modules have the same weight. However, the user will have the
possibility to weight the function differently if needed.


Software requirements
^^^^^^^^^^^^^^^^^^^^^

The scoring allocation system developed within the EIA is generic for each
environmental function and is shown in :numref:`fig-env-scoring-tech`. The main
principle for the different steps is summarised below and is based on three
main steps:

* **STEP 1: quantification of the 'pressure' generated by the stressors**

  The quantification of the pressure is obtained from the environmental
  functions selected and the produced Pressure Score (PS). The PS is then
  adjusted to a new numerical value called the Pressure Score adjusted (PSa)
  through a 'weighting protocol' by multiplying the PS with a coefficient
  ranging from 0 and 1. This happens if local environmental factors exist,
  which are independent from the receptors, and are not included in the
  function's formula. If no weighting is selected, a default value of 1 used.

  At this stage the level of confidence is at its lowest value of 1.

* **STEP 2: basic qualification of the occurrence (or absence) of receptors**

  The second step is triggered if the user is able to indicate the existence
  of receptors onsite. Step 2 uses the score initially generated in step 1 and
  then adjusts it depending on the receptor’s sensitivity by multiplying the
  PSa with the Receptor Sensitivity coefficient (RS), which ranges from 0 to 5,
  unless the user has no receptor data, in which case the RS is assumed to be
  at its maximum value 5. This process leads to the Receptor Sensitivity Score
  (RSS). The different receptors are gathered within main classes reflecting
  their sensitivity to pressure. The user will have to choose between these
  different main classes of receptors that will be characterised by having RS
  values ranging from 0 to 5 for low to high sensitivity, respectively. When
  several receptors are identified onsite, the most sensitive receptors will be
  considered for the EIS calculations. To ultimately obtain the EIS a linear
  mapping is applied and specific calibration tables are used to convert RSS to
  EIS. In the case where the user declares a receptor that is regulatory
  protected (list provided by the database), by default this will automatically
  lead to an EIS of -100.
  
  If the user is able to provide details about the existence of receptors, the
  level of confidence increases to medium, corresponding to the value 2.

* **STEP 3: qualification of the seasonal distribution of receptors**

  The last step is triggered if the user has monthly data for the existence of
  receptors onsite. The step then modulates the final EIS to take into account
  less sensitive receptors when the highest sensitive receptors are declared
  absent. Step 3 is similar to step 2 for each specific receptor declared
  onsite and the EIS is equal to 0 for any receptors absent in a particular
  month. For each month, the EIS is given by the most sensitive species present.

  If the user has such monthly data, the level of confidence is at its highest
  value of 3.

.. _fig-env-scoring-tech:

.. figure:: /images/technical/env_scoring.png

   Scoring algorithm for the Environmental Impact Assessment (EIA)

Lists used for Calibrations
'''''''''''''''''''''''''''

Environmental scores (receptors, weighting, seasonal) have been defined using different lists
of parameters according to the list presented in :numref:`tab-env-data`.

.. _tab-env-data:

.. figure:: /images/technical/env_data.png

   List of scoring parameters used in the environmental assessment

Description of Environmental Functions
''''''''''''''''''''''''''''''''''''''

All of the functions are described in this section. The description is based on 
a generic template that includes all of the different items associated to the 
function. :numref:`tab-detail-function` presents the generic items described 
for each function. 

.. _tab-detail-function:

.. figure:: /images/technical/detail_function.png

   Details on function explanation


.. figure:: /images/technical/env_functions_hydro.png

   Environmental parameters of the array layout module


.. figure:: /images/technical/env_functions_elec.png

   Environmental parameters of the electrical sub-system module 


.. figure:: /images/technical/env_functions_moor.png

   Environmental parameters of the Moorings and Foundations module


.. figure:: /images/technical/env_functions_inst.png

   Environmental parameters of the Installation module


.. figure:: /images/technical/env_functions_om.png

   Environmental parameters of the O&M module



Architecture
^^^^^^^^^^^^

.. _fig-robustness-env:

.. figure:: /images/technical/robustness_env.png

   Robustness diagram for the environmental assessment module

The implementation of the requirements detailed in this section is shown in 
:numref:`fig-robustness-env`. The main component of this system is the Logigram 
class that creates a programmatic representation of the flow chart shown in 
:numref:`fig-env-scoring-tech`. A single subclass of the Logigram class exists 
for each environmental function detailed in the previous section. These are 
loaded from a module containing all the programmatic definitions of the 
function, the module being called the same. 

Each Logigram contains three subclasses of the class Score. A score class
contains a Python pandas table that carries all the scores which are used to
amalgamate the result of the environmental function result and the observations
of receptors or other sensitive items that weight of the function output. The
column names of the tables in each Score subclass can vary, so it is the
responsibility of the subclasses to check the format of the entered data.

The values for these tables are retrieved from files which are stored alongside
the source code for the module (in JSON format, for instance). It was chosen to
store these values locally, rather than in the global database as the values
are extremely sensitively balanced and modification by an unexperienced user
would be undesirable. A special boundary class called LoadScores is available
to help collect the scores from the files and load them into Logigram classes.

The EIA boundary class is used to trigger each Logigram subclass as required. As
the volume of input data can vary depending on which modules are run, the
Logigram classes contain an abstract property called “trigger_identifiers”
which returns a list of identifiers (related to the definitions of the
functions, not the DDS) that can be accessed by the EIA class. As the input
data to the EIA is given in the form of a dictionary, it can check the
identifiers against each of the Logigram subclasses it contains and activate
them as appropriate.

Each Logigram produces an Assessment class to store its results and these are
returned to the EIA class following execution. The EIA class then has methods
to amalgamate the results related to the type of impact (see Table 7.6) and
create an overall global assessment. The user of the software can then access
each of these various levels of information.

Functional Specification
^^^^^^^^^^^^^^^^^^^^^^^^

The following section considers setting up Logigram classes, executing them
independently and then executing them together through an EIA class.

Creating a Logigram subclass
''''''''''''''''''''''''''''

.. _fig-logigram-env:

.. figure:: /images/technical/logigram_env.png

   UML class diagram for the Logigram class

A single Logigram class can be prepared for completing an isolated assessment
for one function as defined in Appendix L. A UML class diagram of the abstract
Logigram class is given in Figure 7.15. To create a concrete class for a
specific function, four methods must be overloaded. An example of supplying
these methods for the energy modification function is shown in Figure 7.16.
Although this process has already been completed for all the functions required
for the DTOcean software, it is useful to see that extending these functions is
a straightforward process. ::

   from .functions import energy_mod

   ...

   def get_impact_name(self):
      return “Energy Modification”

   def get_impact_type(self):
      return “Energy Modification”

   def get_trigger_identifiers(self):
      indentifiers = ["input_energy",
                      "output_energy",
                      "seabed_observations"]
      return identifiers

   def get_impact_value(self, inputs_dict):
      result = energy_mod(inputs_dict["input_energy"], inputs_dict["output_energy"])
      return result

Initialising a Logigram subclass
''''''''''''''''''''''''''''''''

Once a concrete subclass of the Logigram class is created it must be initialised
with data representing the scoring of each component of the flow chart shown in
figure 7.4.5. These scores are collected in subclasses of the Score class, in
order to ensure the format of the given data is correct. For example, building
an ImpactScore class is undertaken as follows: ::

   impact_score_dict = {"impact": [ 0., 0.1, 0.2, 0.3, 1.],
                        "score": [ 0., -1, -3, -5, -5], }

   impact_score = ImpactScore(impact_score_dict)

The process is similar for creating the WeightingScore and ReceptorScore
objects, ensuring that the correct columns are given. Once these three objects
are created, it is straightforward to initialise the Logigram class, as so: ::

   energy_modification = EnergyModification(impact_score,
                                            weighting_score,
                                            receptor_score)

As with the definitions of the Logigram subclasses, it is not anticipated that a
standard user would wish to modify the scores provided alongside the code.
Should they wish to load a Logigram subclass with the stored values, a helper
class is provided called LoadScores. The LoadScores class uses a path to the
location of the stored files. The resulting objects takes an uninitialised
Logigram subclass and return an initialised object containing the stored score
values. A default path for the score file will also be stored within the
LoadScores class, making it very easy to use. For example, to initialise an
EnergyModification object requires just the following code: ::

   loader = LoadScores()
   energy_modication = loader(EnergyModification)

Executing a Single Logigram
'''''''''''''''''''''''''''

Executing a Logigram object is simply a matter of supplying the necessary
inputs. The input relating to the specific impact is unique to the Logigram
subclass being used; however the inputs are always entered in a similar manner,
using a Python dictionary. Additionally, a list of observed protected species
and a dictionary containing observations for species subclasses can be given.
The keys of this dictionary relate to the subclass itself, and the values allow
per month observations. If these monthly observations are not known then the
value “None” indicates they are known to be present, but it is not known when
they are present. Using the EnergyModification Logigram subclass as an example
once again, the process for executing it, using the energy_assessment object
that was made earlier, would be as follows: ::

   impacts = {"input_energy": 100,
              "output_energy": 90,
              "seabed_observation": "Loose sand"}

   protected_observations = ["clown fish"]

   subclass_observations = {"soft substrate ecosystem": None,
                            "particular habitats": ["Jan", "Feb", "Mar", "Apr"],
                            "benthos": ["Jan", "Feb", "Mar", "Apr"] }

   energy_assessment = energy_modification(impacts, protected_observations, subclass_observations)

The output of the call to the energy_modication object is an object of the
Assessment class. This class standardises the outputs of the assessments so
they can be combined easily. In general, they contain the following attributes:

* **impact_type**: the class of impact which contains this function
* **score**: the combined score for the function (+ve or –ve depending on the
  type)
* **confidence_level**: the level of confidence depending on the known data
* **impact_scores**: a dictionary detailing the impact score calculation
* **protected_scores**: a dictionary detailing the scores for protected species
* **basic_receptor_scores**: a table detailing the scores relating to
  non-temporal subspecies observations
* **temporal_receptor_scores**: a table detailing the scores relating to
  temporal subspecies observations

Using the EIA Class to Combine Impacts
''''''''''''''''''''''''''''''''''''''

The EIA class allows many Logigram subclasses to be executed at once, in
response to the data available. It can also combine those assessments to
produce aggregated scores for impact types and an overall score for all of the
impacts.

An EIA class can be initialised with a list of Logigram subclass objects which
have been initialised as described above. This EIA class is then ready to use
in a very similar manner to the individual Logigram subclasses, except that the
impacts dictionary is expanded to include all of the variables that relate to
impact scores. An example of creating and executing an EIA class object is as
follows: ::

   environmental_assessment = EIA([energy_assessment,
                                   seaborn_impact_risk, ... ])

   all_assessments = environmental_assessment(impacts,
                                              protected_observations,
                                              subclass_observations)

The output “all_assessments” is a dictionary where the keys are the name of the
impact (retrieved with the “get_impact_name” method) and the values are the
Assessment objects related to that particular impact. The EIA class has three
further functions for amalgamating the assessment scores. These are:

* type_scores: generates scores and confidence levels per impact type
* local_score: generates a total score and confidence level for a single module
* global_score: generates a global total score for all the modules

The first two functions take the dictionary output of the EIA call
(all_assessments), but the last function takes a list of all the local scores
which are required to be combined into the overall global assessment.
